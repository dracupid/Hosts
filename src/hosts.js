// Generated by CoffeeScript 1.8.0
(function() {
  var Hosts, arg, cmd, fs, hosts, hostsPath, isIp;

  fs = require('fs');

  hostsPath = "C:/Windows/System32/drivers/etc/hosts";

  isIp = function(ip) {
    return /^(?:(?!0)[1-9]?[0-9]|1[0-9]{2}|2(?:[0-4][0-9]|5[0-5]))(?:\.(?:[1-9]?[0-9]|1[0-9]{2}|2(?:[0-4][0-9]|5[0-5]))){3}$/g.test(ip);
  };

  Hosts = (function() {
    function Hosts(path) {
      this.path = path;
      this.map = {};
    }

    Hosts.prototype.add = function(ip, name) {
      if (this.map[ip]) {
        return this.map[ip].push(name);
      } else {
        return this.map[ip] = [name];
      }
    };

    Hosts.prototype.show = function() {
      var couter, ip, names, _ref, _results;
      couter = 1;
      _ref = this.map;
      _results = [];
      for (ip in _ref) {
        names = _ref[ip];
        console.log("[" + couter + "] " + ip + " ----------------------------");
        _results.push(names.forEach(function(name) {
          console.log("\t\t" + name);
          return couter++;
        }));
      }
      return _results;
    };

    Hosts.prototype.showNameByIp = function(ip) {
      var counter;
      if (!this.map[ip]) {
        console.log("Not Found");
      }
      counter = 1;
      return this.map[ip].forEach(function(name) {
        console.log("[" + counter + "] " + name);
        return counter++;
      });
    };

    Hosts.prototype.showIpByname = function(name) {
      var counter, ip, name_, names, _i, _len, _ref;
      counter = 1;
      _ref = this.map;
      for (ip in _ref) {
        names = _ref[ip];
        for (_i = 0, _len = names.length; _i < _len; _i++) {
          name_ = names[_i];
          if (name_.indexOf(name) >= 0) {
            console.log("[" + counter + "] " + ip);
            counter++;
            break;
          }
        }
      }
      if (counter === 1) {
        return console.log("Not Found");
      }
    };

    Hosts.prototype.fetch = function() {
      var content, e;
      try {
        content = fs.readFileSync(this.path, 'utf-8');
        content = content.replace(/#.*/g, "").split(/[(\n|\r|(\r\n))|(\u0085)|(\u2028)|(\u2029)]+/);
        return content.forEach((function(_this) {
          return function(item) {
            var e, ip, name, _ref;
            if (!item) {

            } else {
              try {
                _ref = item.split(/[\s]+/), ip = _ref[0], name = _ref[1];
                return _this.add(ip, name);
              } catch (_error) {
                e = _error;
                console.log(e);
              }
            }
          };
        })(this));
      } catch (_error) {
        e = _error;
        return console.log(e);
      }
    };

    return Hosts;

  })();

  hosts = new Hosts(hostsPath);

  hosts.fetch();

  cmd = process.argv[2];

  if (/(list)|l|ls/.test(cmd)) {
    hosts.show();
  }

  if (/(get)|g/.test(cmd)) {
    arg = process.argv[3];
    if (isIp(arg)) {
      hosts.showNameByIp(arg);
    } else {
      hosts.showIpByname(arg);
    }
  }

}).call(this);
